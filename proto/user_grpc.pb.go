// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: user.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	GetProject(ctx context.Context, in *UserProfile, opts ...grpc.CallOption) (*Project, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetProject(ctx context.Context, in *UserProfile, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/user.UserService/GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	GetProject(context.Context, *UserProfile) (*Project, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) GetProject(context.Context, *UserProfile) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetProject(ctx, req.(*UserProfile))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProject",
			Handler:    _UserService_GetProject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

// ProjectServiceClient is the client API for ProjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectServiceClient interface {
	GetAssignment(ctx context.Context, in *Project, opts ...grpc.CallOption) (*Assignment, error)
	GetAllProjects(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ProjectService_GetAllProjectsClient, error)
	CreateProjects(ctx context.Context, opts ...grpc.CallOption) (ProjectService_CreateProjectsClient, error)
	CreateAssignments(ctx context.Context, opts ...grpc.CallOption) (ProjectService_CreateAssignmentsClient, error)
}

type projectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectServiceClient(cc grpc.ClientConnInterface) ProjectServiceClient {
	return &projectServiceClient{cc}
}

func (c *projectServiceClient) GetAssignment(ctx context.Context, in *Project, opts ...grpc.CallOption) (*Assignment, error) {
	out := new(Assignment)
	err := c.cc.Invoke(ctx, "/user.ProjectService/GetAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetAllProjects(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ProjectService_GetAllProjectsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProjectService_ServiceDesc.Streams[0], "/user.ProjectService/GetAllProjects", opts...)
	if err != nil {
		return nil, err
	}
	x := &projectServiceGetAllProjectsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProjectService_GetAllProjectsClient interface {
	Recv() (*Project, error)
	grpc.ClientStream
}

type projectServiceGetAllProjectsClient struct {
	grpc.ClientStream
}

func (x *projectServiceGetAllProjectsClient) Recv() (*Project, error) {
	m := new(Project)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *projectServiceClient) CreateProjects(ctx context.Context, opts ...grpc.CallOption) (ProjectService_CreateProjectsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProjectService_ServiceDesc.Streams[1], "/user.ProjectService/CreateProjects", opts...)
	if err != nil {
		return nil, err
	}
	x := &projectServiceCreateProjectsClient{stream}
	return x, nil
}

type ProjectService_CreateProjectsClient interface {
	Send(*Project) error
	CloseAndRecv() (*ResponseStatus, error)
	grpc.ClientStream
}

type projectServiceCreateProjectsClient struct {
	grpc.ClientStream
}

func (x *projectServiceCreateProjectsClient) Send(m *Project) error {
	return x.ClientStream.SendMsg(m)
}

func (x *projectServiceCreateProjectsClient) CloseAndRecv() (*ResponseStatus, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ResponseStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *projectServiceClient) CreateAssignments(ctx context.Context, opts ...grpc.CallOption) (ProjectService_CreateAssignmentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProjectService_ServiceDesc.Streams[2], "/user.ProjectService/CreateAssignments", opts...)
	if err != nil {
		return nil, err
	}
	x := &projectServiceCreateAssignmentsClient{stream}
	return x, nil
}

type ProjectService_CreateAssignmentsClient interface {
	Send(*Project) error
	Recv() (*Assignment, error)
	grpc.ClientStream
}

type projectServiceCreateAssignmentsClient struct {
	grpc.ClientStream
}

func (x *projectServiceCreateAssignmentsClient) Send(m *Project) error {
	return x.ClientStream.SendMsg(m)
}

func (x *projectServiceCreateAssignmentsClient) Recv() (*Assignment, error) {
	m := new(Assignment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProjectServiceServer is the server API for ProjectService service.
// All implementations must embed UnimplementedProjectServiceServer
// for forward compatibility
type ProjectServiceServer interface {
	GetAssignment(context.Context, *Project) (*Assignment, error)
	GetAllProjects(*emptypb.Empty, ProjectService_GetAllProjectsServer) error
	CreateProjects(ProjectService_CreateProjectsServer) error
	CreateAssignments(ProjectService_CreateAssignmentsServer) error
	mustEmbedUnimplementedProjectServiceServer()
}

// UnimplementedProjectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProjectServiceServer struct {
}

func (UnimplementedProjectServiceServer) GetAssignment(context.Context, *Project) (*Assignment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssignment not implemented")
}
func (UnimplementedProjectServiceServer) GetAllProjects(*emptypb.Empty, ProjectService_GetAllProjectsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllProjects not implemented")
}
func (UnimplementedProjectServiceServer) CreateProjects(ProjectService_CreateProjectsServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateProjects not implemented")
}
func (UnimplementedProjectServiceServer) CreateAssignments(ProjectService_CreateAssignmentsServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateAssignments not implemented")
}
func (UnimplementedProjectServiceServer) mustEmbedUnimplementedProjectServiceServer() {}

// UnsafeProjectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectServiceServer will
// result in compilation errors.
type UnsafeProjectServiceServer interface {
	mustEmbedUnimplementedProjectServiceServer()
}

func RegisterProjectServiceServer(s grpc.ServiceRegistrar, srv ProjectServiceServer) {
	s.RegisterService(&ProjectService_ServiceDesc, srv)
}

func _ProjectService_GetAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.ProjectService/GetAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetAssignment(ctx, req.(*Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetAllProjects_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProjectServiceServer).GetAllProjects(m, &projectServiceGetAllProjectsServer{stream})
}

type ProjectService_GetAllProjectsServer interface {
	Send(*Project) error
	grpc.ServerStream
}

type projectServiceGetAllProjectsServer struct {
	grpc.ServerStream
}

func (x *projectServiceGetAllProjectsServer) Send(m *Project) error {
	return x.ServerStream.SendMsg(m)
}

func _ProjectService_CreateProjects_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProjectServiceServer).CreateProjects(&projectServiceCreateProjectsServer{stream})
}

type ProjectService_CreateProjectsServer interface {
	SendAndClose(*ResponseStatus) error
	Recv() (*Project, error)
	grpc.ServerStream
}

type projectServiceCreateProjectsServer struct {
	grpc.ServerStream
}

func (x *projectServiceCreateProjectsServer) SendAndClose(m *ResponseStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *projectServiceCreateProjectsServer) Recv() (*Project, error) {
	m := new(Project)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ProjectService_CreateAssignments_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProjectServiceServer).CreateAssignments(&projectServiceCreateAssignmentsServer{stream})
}

type ProjectService_CreateAssignmentsServer interface {
	Send(*Assignment) error
	Recv() (*Project, error)
	grpc.ServerStream
}

type projectServiceCreateAssignmentsServer struct {
	grpc.ServerStream
}

func (x *projectServiceCreateAssignmentsServer) Send(m *Assignment) error {
	return x.ServerStream.SendMsg(m)
}

func (x *projectServiceCreateAssignmentsServer) Recv() (*Project, error) {
	m := new(Project)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProjectService_ServiceDesc is the grpc.ServiceDesc for ProjectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.ProjectService",
	HandlerType: (*ProjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAssignment",
			Handler:    _ProjectService_GetAssignment_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllProjects",
			Handler:       _ProjectService_GetAllProjects_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateProjects",
			Handler:       _ProjectService_CreateProjects_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "CreateAssignments",
			Handler:       _ProjectService_CreateAssignments_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "user.proto",
}
